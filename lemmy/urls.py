from django.urls import path
from hatchway import methods

from .views import (
    accounts,
    auth,
    comments,
    communities,
    emoji,
    inbox,
    instances,
    messages,
    moderation,
    posts,
    preferences,
    search,
)

urlpatterns = [
    path(
        "site",
        methods(get=instances.site_detail, put=instances.update, post=instances.create),
    ),
    path("site/block", instances.block),
    path("search", search.search),
    path("resolve_object", search.resolve_object),
    path("modlog", moderation.log),
    path("federated_instances", instances.federated),
    path(
        "community",
        methods(
            get=communities.community_detail,
            put=communities.update,
            post=communities.create,
        ),
    ),
    path("community/hide", communities.hide),
    path("community/list", communities.community_list),
    path("community/follow", communities.follow),
    path("community/block", communities.block),
    path("community/delete", communities.delete),
    path("community/remove", moderation.remove_community),
    path("community/transfer", communities.transfer),
    path("community/ban_user", moderation.ban_user_from_community),
    path("community/mod", moderation.add_moderator),
    path("post", methods(get=posts.get_detail, put=posts.edit, post=posts.create)),
    path("post/list", posts.post_list),
    path("post/delete", posts.delete),
    path("post/remove", moderation.remove_post),
    path("post/mark_as_read", posts.mark_as_read),
    path("post/lock", posts.lock),
    path("post/feature", posts.feature),
    path("post/like", posts.like),
    path("post/like/list", posts.likes),
    path("post/save", posts.bookmark),
    path("post/report", posts.report),
    path("post/report/resolve", moderation.resolve_post_report),
    path("post/report/list", moderation.post_reports),
    #    path("post/site_metadata", instances.site_detail),
    path(
        "comment",
        methods(get=comments.get_detail, put=comments.edit, post=comments.create),
    ),
    path("comment/delete", comments.delete),
    path("comment/list", comments.comment_list),
    path("comment/like/list", comments.likes),
    path("comment/like", comments.like),
    path("comment/remove", moderation.remove_comment),
    path("comment/distinguish", moderation.distinguish_comment),
    path("comment/mark_as_read", comments.mark_as_read),
    path("comment/save", comments.bookmark),
    path("comment/report", comments.report),
    path("comment/report/resolve", moderation.resolve_comment_report),
    path("comment/report/list", moderation.comment_reports),
    path(
        "private_message",
        methods(get=messages.get_detail, put=messages.edit, post=messages.create),
    ),
    path("private_message/list", messages.message_list),
    path("private_message/delete", messages.delete),
    path("private_message/mark_as_read", messages.mark_as_read),
    path("private_message/report", messages.report),
    path("private_message/report/resolve", moderation.resolve_message_report),
    path("private_message/report/list", moderation.message_reports),
    path("user", accounts.get_detail),
    path("user/register", accounts.register),
    path("user/get_captcha", auth.captcha),
    path("user/mention", inbox.mention_list),
    path("user/mention/mark_as_read", inbox.mark_as_read),
    path("user/replies", comments.replies),
    path("user/ban", moderation.ban_user),
    path("user/banned", instances.banned_users),
    path("user/block", accounts.block_user),
    path("user/login", auth.login),
    path("user/delete_account", accounts.delete),
    path("user/password_reset", auth.request_password_reset),
    path("user/password_change", auth.complete_password_reset),
    path("user/mark_all_as_read", inbox.clear),
    path("user/save_user_settings", preferences.save),
    path("user/change_password", auth.change_password),
    path("user/report_count", moderation.report_summary),
    path("user/unread_count", inbox.summary),
    path("user/verify_email", auth.complete_email_verification),
    path("user/leave_admin", instances.leave_site),
    path("user/totp/generate", auth.generate_totp),
    path("user/totp/update", auth.update_totp),
    path("user/export_settings", preferences.export),
    path("user/import_settings", preferences.restore),
    path("user/list_logins", auth.sessions),
    path("user/validate_auth", auth.check),
    path("user/logout", auth.logout),
    path("admin/add", instances.add_admin),
    path(
        "admin/registration_application/count", inbox.registration_application_summary
    ),
    path("admin/registration_application/list", accounts.registration_applications),
    path("admin/registration_application/approve", accounts.approve_registration),
    path("admin/purge/person", accounts.purge),
    path("admin/purge/community", communities.purge),
    path("admin/purge/post", posts.purge),
    path("admin/purge/comment", comments.purge),
    path("custom_emoji", methods(put=emoji.edit, post=emoji.create)),
    path("custom_emoji/delete", emoji.delete),
]
