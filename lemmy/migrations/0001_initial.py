# Generated by Django 4.2.9 on 2024-01-31 03:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0022_follow_request"),
    ]

    operations = [
        migrations.CreateModel(
            name="CaptchaAnswer",
            fields=[
                ("uuid", models.UUIDField(primary_key=True, serialize=False)),
                ("answer", models.TextField()),
                ("published", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("removed", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("deleted", models.BooleanField()),
                ("ap_id", models.CharField(max_length=255, unique=True)),
                ("local", models.BooleanField()),
                ("path", models.TextField()),
                ("distinguished", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("removed", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("deleted", models.BooleanField()),
                ("nsfw", models.BooleanField()),
                ("actor_id", models.CharField(max_length=255, unique=True)),
                ("local", models.BooleanField()),
                ("private_key", models.TextField(blank=True, null=True)),
                ("public_key", models.TextField()),
                ("last_refreshed_at", models.DateTimeField()),
                ("icon", models.TextField(blank=True, null=True)),
                ("banner", models.TextField(blank=True, null=True)),
                ("followers_url", models.CharField(max_length=255, unique=True)),
                ("inbox_url", models.CharField(max_length=255)),
                (
                    "shared_inbox_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("hidden", models.BooleanField()),
                ("posting_restricted_to_mods", models.BooleanField()),
                (
                    "moderators_url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "featured_url",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=3)),
                ("name", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="LocalSite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("site_setup", models.BooleanField(default=False)),
                ("enable_downvotes", models.BooleanField(default=True)),
                ("enable_nsfw", models.BooleanField(default=False)),
                ("community_creation_admin_only", models.BooleanField(default=True)),
                ("require_email_verification", models.BooleanField(default=True)),
                ("application_question", models.TextField(blank=True, null=True)),
                ("private_instance", models.BooleanField(default=False)),
                ("default_theme", models.TextField()),
                (
                    "default_post_listing_type",
                    models.CharField(
                        choices=[
                            ("All", "All"),
                            ("Local", "Local"),
                            ("Subscribed", "Subscribed"),
                            ("ModeratorView", "Moderatorview"),
                        ],
                        default="Subscribed",
                        max_length=20,
                    ),
                ),
                ("legal_information", models.TextField(blank=True, null=True)),
                ("hide_modlog_mod_names", models.BooleanField(default=False)),
                ("application_email_admins", models.BooleanField(default=False)),
                ("slur_filter_regex", models.TextField(blank=True, null=True)),
                ("actor_name_max_length", models.IntegerField(default=20)),
                ("federation_enabled", models.BooleanField(default=True)),
                ("captcha_enabled", models.BooleanField(default=False)),
                ("captcha_difficulty", models.CharField(max_length=255)),
                ("published", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "registration_mode",
                    models.CharField(
                        choices=[
                            ("Closed", "Closed"),
                            ("RequireApplication", "Requireapplication"),
                            ("Open", "Open"),
                        ],
                        default="RequireApplication",
                        max_length=20,
                    ),
                ),
                ("reports_email_admins", models.BooleanField(default=False)),
                ("federation_signed_fetch", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="LocalUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password_encrypted", models.TextField()),
                ("email", models.TextField(blank=True, null=True, unique=True)),
                ("show_nsfw", models.BooleanField()),
                ("theme", models.TextField()),
                ("default_sort_type", models.TextField()),
                ("default_listing_type", models.TextField()),
                ("interface_language", models.CharField(max_length=20)),
                ("show_avatars", models.BooleanField()),
                ("send_notifications_to_email", models.BooleanField()),
                ("show_scores", models.BooleanField()),
                ("show_bot_accounts", models.BooleanField()),
                ("show_read_posts", models.BooleanField()),
                ("email_verified", models.BooleanField()),
                ("accepted_application", models.BooleanField()),
                ("totp_2fa_secret", models.TextField(blank=True, null=True)),
                ("open_links_in_new_tab", models.BooleanField()),
                ("infinite_scroll_enabled", models.BooleanField()),
                ("blur_nsfw", models.BooleanField()),
                ("auto_expand", models.BooleanField()),
                ("admin", models.BooleanField()),
                ("post_listing_mode", models.TextField()),
                ("totp_2fa_enabled", models.BooleanField()),
                ("enable_keyboard_navigation", models.BooleanField()),
                ("enable_animated_images", models.BooleanField()),
                ("collapse_bot_comments", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "identity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="users.identity",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("banned", models.BooleanField()),
                ("matrix_user_id", models.TextField(blank=True, null=True)),
                ("bot_account", models.BooleanField(default=False)),
                ("ban_expires", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("users.identity",),
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("url", models.CharField(blank=True, max_length=512, null=True)),
                ("body", models.TextField(blank=True, null=True)),
                ("removed", models.BooleanField()),
                ("locked", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("deleted", models.BooleanField()),
                ("nsfw", models.BooleanField()),
                ("embed_title", models.TextField(blank=True, null=True)),
                ("embed_description", models.TextField(blank=True, null=True)),
                ("thumbnail_url", models.TextField(blank=True, null=True)),
                ("ap_id", models.CharField(max_length=255, unique=True)),
                ("local", models.BooleanField()),
                ("embed_video_url", models.TextField(blank=True, null=True)),
                ("featured_community", models.BooleanField()),
                ("featured_local", models.BooleanField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.language"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrivateMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("deleted", models.BooleanField()),
                ("read", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                ("ap_id", models.CharField(max_length=255, unique=True)),
                ("local", models.BooleanField()),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="privatemessage_recipient_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReceivedActivity",
            fields=[
                ("ap_id", models.TextField(primary_key=True, serialize=False)),
                ("published", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Secret",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("jwt_secret", models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name="SentActivity",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("ap_id", models.TextField(unique=True)),
                ("data", models.TextField()),
                ("sensitive", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("send_inboxes", models.TextField()),
                (
                    "send_community_followers_of",
                    models.IntegerField(blank=True, null=True),
                ),
                ("send_all_instances", models.BooleanField()),
                ("actor_type", models.TextField()),
                ("actor_apub_id", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                (
                    "identity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="users.identity",
                    ),
                ),
                ("sidebar", models.TextField(blank=True, null=True)),
                ("admins", models.ManyToManyField(to="lemmy.person")),
            ],
            options={
                "abstract": False,
            },
            bases=("users.identity",),
        ),
        migrations.CreateModel(
            name="Instance",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("users.domain",),
        ),
        migrations.CreateModel(
            name="CommentAggregates",
            fields=[
                (
                    "comment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.comment",
                    ),
                ),
                ("score", models.BigIntegerField()),
                ("upvotes", models.BigIntegerField()),
                ("downvotes", models.BigIntegerField()),
                ("published", models.DateTimeField()),
                ("child_count", models.IntegerField()),
                ("hot_rank", models.FloatField()),
                ("controversy_rank", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="CommunityAggregates",
            fields=[
                (
                    "community",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.community",
                    ),
                ),
                ("subscribers", models.BigIntegerField()),
                ("posts", models.BigIntegerField()),
                ("comments", models.BigIntegerField()),
                ("published", models.DateTimeField()),
                ("users_active_day", models.BigIntegerField()),
                ("users_active_week", models.BigIntegerField()),
                ("users_active_month", models.BigIntegerField()),
                ("users_active_half_year", models.BigIntegerField()),
                ("hot_rank", models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name="FederationBlocklist",
            fields=[
                (
                    "instance",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.instance",
                    ),
                ),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="FederationQueueState",
            fields=[
                (
                    "instance",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.instance",
                    ),
                ),
                ("last_successful_id", models.BigIntegerField(blank=True, null=True)),
                ("fail_count", models.IntegerField()),
                ("last_retry", models.DateTimeField(blank=True, null=True)),
                (
                    "last_successful_published_time",
                    models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonBan",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Tagline",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "local_site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localsite",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SiteAggregates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("users", models.BigIntegerField(default=0)),
                ("posts", models.BigIntegerField(default=0)),
                ("comments", models.BigIntegerField(default=0)),
                ("communities", models.BigIntegerField(default=0)),
                ("users_active_day", models.BigIntegerField(default=0)),
                ("users_active_week", models.BigIntegerField(default=0)),
                ("users_active_month", models.BigIntegerField(default=0)),
                ("users_active_half_year", models.BigIntegerField(default=0)),
                (
                    "site",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.site"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegistrationApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.TextField()),
                ("deny_reason", models.TextField(blank=True, null=True)),
                ("published", models.DateTimeField()),
                (
                    "admin",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.person",
                    ),
                ),
                (
                    "local_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonAggregates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("post_count", models.BigIntegerField(default=0)),
                ("post_score", models.BigIntegerField(default=0)),
                ("comment_count", models.BigIntegerField(default=0)),
                ("comment_score", models.BigIntegerField(default=0)),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PasswordResetRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.TextField()),
                ("published", models.DateTimeField()),
                (
                    "local_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModTransferCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "other_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modtransfercommunity_other_person_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModRemovePost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("removed", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModRemoveCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("removed", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModRemoveComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("removed", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModLockPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("locked", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModHideCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when_field", models.DateTimeField(db_column="when_")),
                ("reason", models.TextField(blank=True, null=True)),
                ("hidden", models.BooleanField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModFeaturePost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("featured", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                ("is_featured_community", models.BooleanField()),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModBanFromCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("banned", models.BooleanField()),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "other_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modbanfromcommunity_other_person_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModBan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("banned", models.BooleanField()),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "other_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modban_other_person_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModAddCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("removed", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "other_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modaddcommunity_other_person_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModAdd",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("removed", models.BooleanField()),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "mod_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "other_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modadd_other_person_set",
                        to="lemmy.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LoginToken",
            fields=[
                ("token", models.TextField(primary_key=True, serialize=False)),
                ("published", models.DateTimeField()),
                ("ip", models.TextField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localuser",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="localuser",
            name="person",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
            ),
        ),
        migrations.CreateModel(
            name="LocalSiteRateLimit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.IntegerField(default=999)),
                ("message_per_second", models.IntegerField(default=60)),
                ("post", models.IntegerField(default=999)),
                ("post_per_second", models.IntegerField(default=60)),
                ("register", models.IntegerField(default=999)),
                ("register_per_second", models.IntegerField(default=3600)),
                ("image", models.IntegerField(default=999)),
                ("image_per_second", models.IntegerField(default=3600)),
                ("comment", models.IntegerField(default=999)),
                ("comment_per_second", models.IntegerField(default=3600)),
                ("search", models.IntegerField(default=999)),
                ("search_per_second", models.IntegerField(default=600)),
                ("import_user_settings", models.IntegerField(default=1)),
                ("import_user_settings_per_second", models.IntegerField(default=86400)),
                ("published", models.DateTimeField(auto_now=True)),
                ("updated", models.DateTimeField(auto_now_add=True)),
                (
                    "local_site",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localsite",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="localsite",
            name="site",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.site"
            ),
        ),
        migrations.CreateModel(
            name="ImageUpload",
            fields=[
                ("pictrs_alias", models.TextField(primary_key=True, serialize=False)),
                ("pictrs_delete_token", models.TextField()),
                ("published", models.DateTimeField()),
                (
                    "local_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FederationAllowlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "instance",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.instance"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.TextField()),
                ("verification_token", models.TextField()),
                ("published", models.DateTimeField()),
                (
                    "local_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomEmoji",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("shortcode", models.CharField(max_length=128, unique=True)),
                ("image_url", models.TextField(unique=True)),
                ("alt_text", models.TextField()),
                ("category", models.TextField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "local_site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.localsite",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="community",
            name="instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.instance"
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="creator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.language"
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
            ),
        ),
        migrations.CreateModel(
            name="AdminPurgePost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "admin_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminPurgePerson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "admin_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminPurgeCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "admin_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminPurgeComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reason", models.TextField(blank=True, null=True)),
                ("when_field", models.DateTimeField(db_column="when_")),
                (
                    "admin_person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrivateMessageReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("original_pm_text", models.TextField()),
                ("reason", models.TextField()),
                ("resolved", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "private_message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.privatemessage",
                    ),
                ),
                (
                    "resolver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="privatemessagereport_resolver_set",
                        to="lemmy.person",
                    ),
                ),
            ],
            options={
                "unique_together": {("private_message", "creator")},
            },
        ),
        migrations.CreateModel(
            name="PostReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("original_post_name", models.CharField(max_length=200)),
                ("original_post_url", models.TextField(blank=True, null=True)),
                ("original_post_body", models.TextField(blank=True, null=True)),
                ("reason", models.TextField()),
                ("resolved", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
                (
                    "resolver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="postreport_resolver_set",
                        to="lemmy.person",
                    ),
                ),
            ],
            options={
                "unique_together": {("post", "creator")},
            },
        ),
        migrations.CreateModel(
            name="PostAggregates",
            fields=[
                (
                    "post",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.post",
                    ),
                ),
                ("comments", models.BigIntegerField()),
                ("score", models.BigIntegerField()),
                ("upvotes", models.BigIntegerField()),
                ("downvotes", models.BigIntegerField()),
                ("published", models.DateTimeField()),
                ("newest_comment_time_necro", models.DateTimeField()),
                ("newest_comment_time", models.DateTimeField()),
                ("featured_community", models.BooleanField()),
                ("featured_local", models.BooleanField()),
                ("hot_rank", models.FloatField()),
                ("hot_rank_active", models.FloatField()),
                ("controversy_rank", models.FloatField()),
                ("scaled_rank", models.FloatField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.instance"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonMention",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("read", models.BooleanField()),
                ("published", models.DateTimeField()),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
            options={
                "unique_together": {("recipient", "comment")},
            },
        ),
        migrations.CreateModel(
            name="InstanceBlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.domain"
                    ),
                ),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "instance")},
            },
        ),
        migrations.CreateModel(
            name="CustomEmojiKeyword",
            fields=[
                (
                    "custom_emoji",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.customemoji",
                    ),
                ),
                ("keyword", models.CharField(max_length=128)),
            ],
            options={
                "unique_together": {("custom_emoji", "keyword")},
            },
        ),
        migrations.CreateModel(
            name="CommentReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("original_comment_text", models.TextField()),
                ("reason", models.TextField()),
                ("resolved", models.BooleanField()),
                ("published", models.DateTimeField()),
                ("updated", models.DateTimeField(blank=True, null=True)),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
                (
                    "resolver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="commentreport_resolver_set",
                        to="lemmy.person",
                    ),
                ),
            ],
            options={
                "unique_together": {("comment", "creator")},
            },
        ),
        migrations.CreateModel(
            name="CommentReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("read", models.BooleanField()),
                ("published", models.DateTimeField()),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
            options={
                "unique_together": {("recipient", "comment")},
            },
        ),
        migrations.CreateModel(
            name="SiteLanguage",
            fields=[
                (
                    "site",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.site",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.language"
                    ),
                ),
            ],
            options={
                "unique_together": {("site", "language")},
            },
        ),
        migrations.CreateModel(
            name="PostSaved",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "post")},
            },
        ),
        migrations.CreateModel(
            name="PostRead",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "post")},
            },
        ),
        migrations.CreateModel(
            name="PostLike",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("score", models.SmallIntegerField()),
                ("published", models.DateTimeField()),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "post")},
            },
        ),
        migrations.CreateModel(
            name="PersonPostAggregates",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("read_comments", models.BigIntegerField()),
                ("published", models.DateTimeField()),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "post")},
            },
        ),
        migrations.CreateModel(
            name="PersonFollower",
            fields=[
                (
                    "follower",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="personfollower_follower_set",
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                ("pending", models.BooleanField()),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.person"
                    ),
                ),
            ],
            options={
                "unique_together": {("follower", "person")},
            },
        ),
        migrations.CreateModel(
            name="PersonBlock",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personblock_target_set",
                        to="lemmy.person",
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "target")},
            },
        ),
        migrations.CreateModel(
            name="LocalUserLanguage",
            fields=[
                (
                    "local_user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.localuser",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.language"
                    ),
                ),
            ],
            options={
                "unique_together": {("local_user", "language")},
            },
        ),
        migrations.CreateModel(
            name="CommunityPersonBan",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                ("expires", models.DateTimeField(blank=True, null=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "community")},
            },
        ),
        migrations.CreateModel(
            name="CommunityModerator",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "community")},
            },
        ),
        migrations.CreateModel(
            name="CommunityLanguage",
            fields=[
                (
                    "community",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.community",
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.language"
                    ),
                ),
            ],
            options={
                "unique_together": {("community", "language")},
            },
        ),
        migrations.CreateModel(
            name="CommunityFollower",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                ("pending", models.BooleanField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "community")},
            },
        ),
        migrations.CreateModel(
            name="CommunityBlock",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lemmy.community",
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "community")},
            },
        ),
        migrations.CreateModel(
            name="CommentSaved",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("published", models.DateTimeField()),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "comment")},
            },
        ),
        migrations.CreateModel(
            name="CommentLike",
            fields=[
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="lemmy.person",
                    ),
                ),
                ("score", models.SmallIntegerField()),
                ("published", models.DateTimeField()),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.comment"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lemmy.post"
                    ),
                ),
            ],
            options={
                "unique_together": {("person", "comment")},
            },
        ),
    ]
